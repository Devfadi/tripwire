<?php


/**
 * Implementation of hook_install()
 */
function tw_password_mgmt_install()
{
	// Create a row each user in the {tw_password_mgmt_users} table
	$query = db_insert('tw_password_mgmt_users')->fields(array('uid'));

	$uids = db_query('SELECT uid FROM {users} WHERE uid > 0');
	foreach($uids as $uid)
	{
		$query->values(array($uid->uid));
	}
	$query->execute();

	// Create a row for each role in the {tw_password_mgmt_roles} table
	$query2 = db_insert('tw_password_mgmt_roles')->fields(array('rid'));

	$rids = db_query('SELECT rid FROM {role} WHERE rid > 1');
	foreach($rids as $rid)
	{
		$query2->values(array($rid->rid));
	}
	$query2->execute();

	// Create a row for each user in the {tw_password_mgmt_emails} table
	$query3 = db_insert('tw_password_mgmt_emails')->fields(array('uid'));
	
	$uids = db_query('SELECT uid FROM {users} WHERE uid > 0');
	foreach($uids as $uid)
	{
		$query3->values(array($uid->uid));
	}
	$query3->execute();
	
	// Create a new column in the {users} table to indicate a required forced password change
	// This is added to the {users} table ather than the {tw_password_mgmt_users} table
	//  so that the value is loaded during the bootstrap process
	db_add_field
	(
		'users',
		'tw_password_mgmt',
		array
		(
			'type' => 'int',
			'length' => 1,
			'default' => 0,
		),
		array
		(
			'indexes' => array
			(
				'user_tw_password' => array('uid', 'tw_password_mgmt'),
			),
		)
	);
	
	// Set a variable indicating the module installation date. This is used in hook_user() to compare the users signup date with the module installation date
	// to see if they were required to change their password upon first time login. Users who signed up before this variable was set will of course not have
	// been required to change their password upon first time login.
	variable_set('tw_password_mgmt_installation_date', REQUEST_TIME);
}

/**
 * Implementation of hook_uninstall()
 */
function tw_password_mgmt_uninstall()
{
	// Remove any values the module added to the {variables} table
	variable_del('tw_password_mgmt_installation_date');
	variable_del('tw_password_mgmt_change_password_url');
	variable_del('tw_password_mgmt_login_or_init');
	variable_del('tw_password_mgmt_pending_login_users');
	variable_del('tw_password_mgmt_expire_password');
	variable_del('tw_password_mgmt_first_login_change');
	variable_del('tw_password_mgmt_first_time_uids');
	// Remove the column that was added to the {users} table on installation
	db_drop_index
	(
		'users',
		'user_tw_password'
	);
	db_drop_field
	(
		'users',
		'tw_password_mgmt'
	);
}

/**
 * Implementation of hook_schema()
 */
function tw_password_mgmt_schema()
{
	// This table contains one row for each user, and holds stats
	// regarding their password changes and when they were last
	// forced to change their password.
	$schema['tw_password_mgmt_users'] = array
	(
		'description' => t('Holds password change data for users'),
		'fields' => array
		(
			'uid' => array
			(
				'description' => t('The UID from the {users} table'),
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'last_password_change' => array
			(
				'description' => t('A UNIX timestamp referring to the date that the user last changed their password'),
				'type' => 'int',
				'unsigned' => TRUE,
				'length' => 10,
				'default' => NULL,
			),
			'last_force' => array
			(
				'description' => t('A UNIX timestamp referring to the last date on which the user was forced to change their password'),
				'type' => 'int',
				'unsigned' => TRUE,
				'length' => 10,
				'default' => NULL,
			),
		),
		'primary key' => array('uid'),
	);
	// This table contains one row for each role, and holds stats
	// regarding the last time the members of the role were forced
	// to change their password
	$schema['tw_password_mgmt_roles'] = array
	(
		'description' => t('Holds the time of the last forced password change by role'),
		'fields' => array
		(
			'rid' => array
			(
				'description' => t('The RID from the {role} table'),
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'last_force' => array
			(
				'description' => t('A UNIX timestamp referring to the last date on which users in the role were forced to change their password'),
				'type' => 'int',
				'unsigned' => TRUE,
				'length' => 10,
			),
		),
		'primary key' => array('rid'),
	);
	// This table contains data regarding the time period after which
	// passwords should expire for members in that role. For example,
	// autheticated users may be forced to change their password once
	// a month.
	$schema['tw_password_mgmt_expiry'] = array
	(
		'description' => t('Holds information related to the expiry of passwords by role'),
		'fields' => array
		(
			'rid' => array
			(
				'description' => t('The RID from the {role} table'),
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'expiry' => array
			(
				'description' => t('The number of seconds after which a user will be forced to reset their password'),
				'type' => 'int',
				'unsigned' => TRUE,
				'default' => 0,
			),
			'weight' => array
			(
				'description' => t('Allows for priorities to be applied to password expirations'),
				'type' => 'int',
				'default' => 0,
			),
		),
		'primary key' => array('rid'),
	);
	// This table contains one row for each user, and holds stats
	// regarding their when they were last emailed to reset their
	// password.
	$schema['tw_password_mgmt_emails'] = array
	(
		'description' => t('Holds password email data for users'),
		'fields' => array
		(
			'uid' => array
			(
				'description' => t('The UID from the {users} table'),
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'fourteen_day_email' => array
			(
				'description' => t('A UNIX timestamp referring to the date that the user was emailed about their expiring password within 14 days of expiring'),
				'type' => 'int',
				'unsigned' => TRUE,
				'length' => 10,
				'default' => NULL,
			),
			'seven_day_email' => array
			(
				'description' => t('A UNIX timestamp referring to the date that the user was emailed about their expiring password within 7 days of expiring'),
				'type' => 'int',
				'unsigned' => TRUE,
				'length' => 10,
				'default' => NULL,
			),
			'locked_email' => array
			(
				'description' => t('A UNIX timestamp referring to the date that the user was emailed about their account being locked'),
				'type' => 'int',
				'unsigned' => TRUE,
				'length' => 10,
				'default' => NULL,
			),
		),
		'primary key' => array('uid'),
	);
	return $schema;
}

/**
 * Implementation of hook_schema_alter()
 *
 * This contains the information for the column that is added
 * to the {users} table by this module.
 */
function tw_password_mgmt_schema_alter(&$schema)
{
	$schema['users']['fields']['tw_password_mgmt'] = array
	(
		'type' => 'int',
		'length' => 1,
		'default' => 0,
	);
	$schema['users']['indexes']['user_tw_password'] = array('uid', 'tw_password_mgmt');
}

/**
 * Implementation of hook_update_N()
 *
 * This function updates the user from Drupal 6 to Drupal 7. Names of variables in the {variable}
 * table have been namespaced in Drupal 7 so as to prevent conflicts with other modules. This update
 * converts the names of the variables to the Drupal 7 names
 */
function tw_password_mgmt_update_7000()
{
	$query = db_update('variable')
		->fields(array('name' => 'tw_password_mgmt_change_password_url'))
		->condition('name', 'change_password_url')
		->execute();
	$query = db_update('variable')
		->fields(array('name' => 'tw_password_mgmt_expire_password'))
		->condition('name', 'expire_password')
		->execute();
	$query = db_update('variable')
		->fields(array('name' => 'tw_password_mgmt_first_login_change'))
		->condition('name', 'first_time_login_password_change')
		->execute();
}

function tw_password_mgmt_update_7200()
{
	global $databases;

	$column_exists = db_query
	(
		'SELECT 1 ' .
		'FROM information_schema.COLUMNS ' .
		'WHERE TABLE_SCHEMA = :db_name ' .
		'AND TABLE_NAME = :users ' .
		'AND COLUMN_NAME = :tw_password_mgmt',
		array
		(
			':db_name' => $databases['default']['default']['database'],
			':users' => 'users',
			':tw_password_mgmt' => 'tw_password_mgmt',
		)
	)->fetchField();

	if(!$column_exists)
	{
		// Create a new column in the {users} table to indicate a required forced password change
		// This is added to the {users} table ather than the {tw_password_mgmt_users} table
		//  so that the value is loaded during the bootstrap process
		db_add_field
		(
			'users',
			'tw_password_mgmt',
			array
			(
				'type' => 'int',
				'length' => 1,
				'default' => 0,
			),
			array
			(
				'indexes' => array
				(
					'user_tw_password' => array('uid', 'tw_password_mgmt'),
				),
			)
		);
	}

	db_drop_primary_key('tw_password_mgmt_expiry');
	db_change_field
	(
		'tw_password_mgmt_expiry',
		'rid',
		'rid',
		array
		(
			'description' => t('The RID from the {role} table'),
			'type' => 'int',
			'unsigned' => TRUE,
			'not null' => TRUE,
		),
		array('primary key' => array('rid'))
	);

	$first_time_login_tw_password_mgmt = variable_get('tw_password_mgmt_first_login_change', 0);
	variable_set('tw_password_mgmt_first_time_login_password_change', $first_time_login_tw_password_mgmt);
	variable_del('tw_password_mgmt_first_login_change');
}