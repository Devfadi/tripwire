<?php

/**
 * @file
 * Password reset module: Install file.
 */

/**
 * Implements hook_install().
 */
function password_reset_install() {
  // Insert demo question.
  db_insert('password_reset')
  ->fields(array('question' => 'What is your library card number?'))
  ->execute();

  $t = get_t();
  drupal_set_message($t('Password Reset module: Installation script complete.'));
}

/**
 * Implements hook_schema().
 */
function password_reset_schema() {
  $schema['password_reset'] = array(
    'description' => 'Stores password reset questions.',
    'fields' => array(
      'qid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary key: unique question ID for each question.'
      ),
      'question' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Question text.'
      ),
      'answer_length' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'description' => 'The minimum required length for answer.'
      ),
      'case_sensitive' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Is this answer case sensitive?'
      ),
      'regex' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Regular expression that needs to be matched for valid answers.'
      ),
      'regex_message' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Error message to display when the regular expression check fails.'
      )
    ),
    'primary key' => array('qid')
  );

  $schema['password_reset_users'] = array(
    'description' => 'Associate questions with users and their answer',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary key: {users}.uid of the user whose question/answer combination is being stored.'
      ),
      'qid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary key: {password_reset}.qid of the question.'
      ),
      'answer' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Answer text.'
      )
    ),
    'primary key' => array('uid', 'qid'),
  );

  return $schema;
}

/**
 * Add the answer_length field.
 */
function password_reset_update_6000() {
  db_add_field('password_reset', 'answer_length', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 1,
    'description' => 'Minimum length for answer.'
  ));
}

/**
 * Add the case_sensitive and regex fields.
 */
function password_reset_update_7000() {
  // Case sensitivity set to TRUE only for upgrades.
  db_add_field('password_reset', 'case_sensitive', array(
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 1,
    'description' => 'Is this answer case sensitive?'
  ));
  db_add_field('password_reset', 'regex', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => 'Regular expression that needs to be matched for valid answers.'
  ));
  db_add_field('password_reset', 'regex_message', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => 'Error message to display when the regular expression check fails.'
  ));
}

/**
 * Hash old answers.
 */
function password_reset_update_7001() {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $result = db_query('SELECT * FROM {password_reset_users}');

  foreach ($result as $record) {
    // Case sensitivity is set to TRUE for upgraded questions.
    db_update('password_reset_users')
      ->fields(array('answer' => user_hash_password($record->answer)))
      ->condition('uid', $record->uid)
      ->condition('qid', $record->qid)
      ->execute();
  }
}



/**
 * Add qid to 'primary_keys' on 'password_reset_users' table so that a user can have multiple questions associated with their profile
 */

function password_reset_update_7002() {
  // we have to drop the primary key first, then add the new ones
  db_drop_primary_key('password_reset_users');
  db_drop_index('password_reset_users', 'qid'); // we're meking this a primary key so doesn't need to be an index.
  // alter the description of 'qid'
  db_change_field('password_reset_users', 'qid', 'qid', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'description' => 'Primary key: {password_reset}.qid of the question.'
  ));
  // add primary keys.
  db_add_primary_key('password_reset_users', array('uid', 'qid'));
}



/**
 * Implements hook_uninstall().
 */
function password_reset_uninstall() {
  variable_del('password_reset');

  $t = get_t();
  drupal_set_message($t('Password reset module: Uninstallation script complete.'));
}
