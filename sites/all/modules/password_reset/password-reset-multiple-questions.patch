diff --git a/password_reset.admin.inc b/password_reset.admin.inc
old mode 100644
new mode 100755
index 678b9c6..76816c6
--- a/password_reset.admin.inc
+++ b/password_reset.admin.inc
@@ -52,6 +52,13 @@ function password_reset_settings_form() {
     '#default_value' => $config['email_profile'],
     '#description' => t('The e-mail address field will be displayed on the user profile form. If checked and if this field is not displayed during registration, users will compusorily need to choose a valid e-mail address.')
   );
+  $form['password_reset']['num_questions'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Number of questions on the password reset form.'),
+    '#description' => t('Enter the number of questions the user will have to answer on their password reset form.'),
+    '#default_value' => $config['num_questions'],
+    '#size' => 3,
+  );
 
   return system_settings_form($form);
 }
diff --git a/password_reset.install b/password_reset.install
old mode 100644
new mode 100755
index 20ab43e..ba62c3b
--- a/password_reset.install
+++ b/password_reset.install
@@ -84,7 +84,7 @@ function password_reset_schema() {
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => 'Index: {password_reset}.qid of the question.'
+        'description' => 'Primary key: {password_reset}.qid of the question.'
       ),
       'answer' => array(
         'type' => 'varchar',
@@ -94,8 +94,7 @@ function password_reset_schema() {
         'description' => 'Answer text.'
       )
     ),
-    'primary key' => array('uid'),
-    'indexes' => array('qid' => array('qid'))
+    'primary key' => array('uid', 'qid'),
   );
 
   return $schema;
@@ -161,6 +160,29 @@ function password_reset_update_7001() {
   }
 }
 
+
+
+/**
+ * Add qid to 'primary_keys' on 'password_reset_users' table so that a user can have multiple questions associated with their profile
+ */
+
+function password_reset_update_7002() {
+  // we have to drop the primary key first, then add the new ones
+  db_drop_primary_key('password_reset_users');
+  db_drop_index('password_reset_users', 'qid'); // we're meking this a primary key so doesn't need to be an index.
+  // alter the description of 'qid'
+  db_change_field('password_reset_users', 'qid', 'qid', array(
+    'type' => 'int',
+    'unsigned' => TRUE,
+    'not null' => TRUE,
+    'description' => 'Primary key: {password_reset}.qid of the question.'
+  ));
+  // add primary keys.
+  db_add_primary_key('password_reset_users', array('uid', 'qid'));
+}
+
+
+
 /**
  * Implements hook_uninstall().
  */
diff --git a/password_reset.module b/password_reset.module
old mode 100644
new mode 100755
index 1cdee08..7ea46a2
--- a/password_reset.module
+++ b/password_reset.module
@@ -150,27 +150,32 @@ function password_reset_form_alter(&$form, &$form_state, $form_id) {
         $form['account']['current_pass_required_values']['#value']['password_reset_answer'] = t('Password reset question');
         // We have a few more jumps to go in a validate function that needs to
         // be triggered before those of the user module.
-        $form['#validate'] = array('password_reset_confirm_password_validate') + $form['#validate'];
-
+        //$form['#validate'] = array('password_reset_confirm_password_validate') + $form['#validate']; // caused 'array' to apper as signature in users table?
+        array_unshift($form['#validate'], 'password_reset_confirm_password_validate');
         // Add to protected values array which is used in the password field's
         // description.
         $protected_values['reset'] = t('Security question');
       }
 
-      $question = password_reset_user_question_get($form['#user']->uid);
+      $questions = password_reset_user_question_get($form['#user']->uid);
 
       // Do not make the question and answer fields compulsory for admins.
-      $required = !($question || _password_reset_user_admin_check($form));
-      $form['password_reset']['question']['#required'] = $required;
-      $form['password_reset']['answer']['#required'] = $required;
-
-      if ($question) {
+      $required = !($questions || _password_reset_user_admin_check($form));
+      foreach ($form['password_reset']['challenge'] as &$qna) {
+        $qna['question']['#required'] = $required;
+        $qna['answer']['#required'] = $required;
+      }
+      if ($questions) {
         $form['password_reset']['#attributes']['class'] = array('password-reset-question-set');
-        $form['password_reset']['question']['#default_value'] = $question->qid;
-        $form['password_reset']['question']['#description'] = t('Your chosen question.');
-        $form['password_reset']['answer']['#description'] = t('Your answer for the chosen question has <strong>already</strong> been saved. Add another answer only if you wish to overwrite the existing data.');
-        // Boolean to indicate if this is to be an INSERT or an UPDATE query.
-        $form['password_reset']['update'] = array('#type' => 'value', '#value' => 1);
+        $i = 0; // question number (starting at 1)
+        foreach ($questions as $question) {
+          ++$i;
+          $form['password_reset']['challenge'][$i]['question']['#default_value'] = $question->qid;
+          $form['password_reset']['challenge'][$i]['question']['#description'] = t('Your chosen question.');
+          $form['password_reset']['challenge'][$i]['answer']['#description'] = t('Your answer for the chosen question has <strong>already</strong> been saved. Add another answer only if you wish to overwrite the existing data.');
+          // Boolean to indicate if this is to be an INSERT or an UPDATE query.
+          $form['password_reset']['challenge'][$i]['update'] = array('#type' => 'value', '#value' => 1);
+        }
       }
 
       // The e-mail field is disabled. The fake address is to be used.
@@ -246,7 +251,8 @@ function password_reset_confirm_password_validate($form, &$form_state) {
     $form['#user']->password_reset_answer = '';
     // Set the value of our temporary element to the current answer.
     // N.B. The value is trimmed in user_validate_current_pass().
-    form_set_value($form['password_reset_answer'], $form_state['values']['password_reset']['answer'], $form_state);
+    // work out the first abswer passed and use that.
+    form_set_value($form['password_reset_answer'], $form_state['values']['password_reset']['challenge'][1]['answer'], $form_state);
   }
 }
 
@@ -266,33 +272,48 @@ function password_reset_confirm_password_validate($form, &$form_state) {
  */
 function password_reset_user_form_validate($form, &$form_state) {
   $form_values = $form_state['values']['password_reset'];
-  $answer = _password_reset_answer_sanitise($form_values['answer']);
+  $questions = array();
+
+  // check each challenge response
+  $num_questions = count($form_values['challenge']);
+  for ($i = 1; $i <= $num_questions; ++$i) {
+
+    $answer = _password_reset_answer_sanitise($form_values['challenge'][$i]['answer']);
+    // Do not make the question and answer fields compulsory for admins.
+    // Allow admins to bypass only if the answer field is empty.
+    $required = TRUE;
+    if ($answer == '' && $form['#form_id'] == 'user_profile_form') {
+      $required = !(isset($form_values['challenge'][$i]['update']) || _password_reset_user_admin_check($form));
+    }
 
-  // Do not make the question and answer fields compulsory for admins.
-  // Allow admins to bypass only if the answer field is empty.
-  $required = TRUE;
-  if ($answer == '' && $form['#form_id'] == 'user_profile_form') {
-    $required = !(isset($form_values['update']) || _password_reset_user_admin_check($form));
-  }
+    if ($required && isset($form_values['challenge'][$i]['question'])) {
+      $error = FALSE;
+      // record question so we can check uniqueness later (not important if !required?)
+      $questions[$i] = $form_values['challenge'][$i]['question'];
 
-  if ($required && isset($form_values['question'])) {
-    $error = FALSE;
+      $question = password_reset_question_get($questions[$i]);
+      if ($question->answer_length > drupal_strlen($answer)) {
+        $error = TRUE;
+        form_set_error("password_reset][challenge][$i][answer", t('The provided answer is too short. This question requires an answer which is at least %length characters in length.', array('%length' => $question->answer_length)));
+      }
 
-    $question = password_reset_question_get($form_values['question']);
-    if ($question->answer_length > drupal_strlen($answer)) {
-      $error = TRUE;
-      form_set_error('password_reset][answer', t('The provided answer is too short. This question requires an answer which is at least %length characters in length.', array('%length' => $question->answer_length)));
-    }
+      if (!empty($question->regex) && !_password_reset_regex_match($question->regex, $answer)) {
+        $error = TRUE;
+        form_set_error('password_reset][challenge][$i][answer', t('%message', array('%message' => $question->regex_message)));
+      }
 
-    if (!empty($question->regex) && !_password_reset_regex_match($question->regex, $answer)) {
-      $error = TRUE;
-      form_set_error('password_reset][answer', t('%message', array('%message' => $question->regex_message)));
+      // If there's an answer validation error, then let the JS know so it can
+      // unhide the answer field by default.
+      if ($error) {
+        drupal_add_js(array('password_reset' => array('invalid_answer' => 1)), 'setting');
+      }
     }
-
-    // If there's an answer validation error, then let the JS know so it can
-    // unhide the answer field by default.
-    if ($error) {
-      drupal_add_js(array('password_reset' => array('invalid_answer' => 1)), 'setting');
+  }
+  // check that the questions are unique
+  foreach ($questions as $index => $question) {
+    // count how many array_keys contain the question as a value. Should only be one.
+    if (count(array_keys($questions, $question)) > 1) {
+      form_set_error("password_reset][challenge][$index][question", t('Question !x: Questions can only be used once.', array('!x' => $index)));
     }
   }
 }
@@ -302,20 +323,23 @@ function password_reset_user_form_validate($form, &$form_state) {
  */
 function password_reset_user_form_submit($form, &$form_state) {
   $form_values = $form_state['values']['password_reset'];
-  $answer = _password_reset_answer_sanitise($form_values['answer']);
 
-  // Only save answer if one has been given to ensure we do not overwrite
-  // existing entries.
-  if ($form_values['question'] && !empty($answer)) {
-    $answer = _password_reset_answer_encase($answer, $form_values['question']);
+  // store all the answers.
+  foreach ($form_values['challenge'] as $form_value) {
+    $answer = _password_reset_answer_sanitise($form_value['answer']);
 
-    $record = array(
-      'uid' => $form_state['user']->uid,
-      'qid' => $form_values['question'],
-      'answer' => $answer
-    );
+    // Only save answer if one has been given to ensure we do not overwrite
+    // existing entries.
+    if ($form_value['question'] && !empty($answer)) {
+      $answer = _password_reset_answer_encase($answer, $form_value['question']);
 
-    password_reset_answer_add($record, isset($form_values['update']) ? 'uid' : array());
+      $record = array(
+        'uid' => $form_state['user']->uid,
+        'qid' => $form_value['question'],
+        'answer' => $answer
+      );
+      password_reset_answer_add($record, isset($form_value['update']) ? array('uid', 'qid') : array());
+    }
   }
 }
 
@@ -401,46 +425,58 @@ function password_reset_form($form, &$form_state) {
       $uid = $user && $user->status ? $user->uid : 0;
 
       // Try to retrieve the question for a valid user.
-      $question = $uid ? password_reset_user_question_get($uid) : FALSE;
-
-      if ($question === FALSE) {
+      $questions = $uid ? password_reset_user_question_get($uid) : FALSE;
+      
+      if ($questions === FALSE) {
         // Question not found, user does not exist or does not have a question
         // selected. We don't want to give any information away. So we select a
-        // question using a checksum over the name for consistency (if we do a
+        // questions using a checksum over the name for consistency (if we do a
         // random select, submitting the form twice will tell an attacker that
         // it is an invalid username).
-        $questions = password_reset_questions_get();
-        $count = count($questions);
-        if ($count) {
-          $checksum = crc32(drupal_strtolower($form_state['values']['username']));
-          $keys = array_keys($questions);
-          $qid = $keys[abs($checksum % $count)];
-
-          $question = new stdClass();
-          $question->qid = $qid;
-          $question->question = $questions[$qid];
-          // Reuse function to generate random answer for the invalid attempt.
-          $question->answer = _password_reset_generate_fake_mail();
+        // keep track of used questions so we don't present the same one twice.
+        $num_user_questions = _password_reset_variable_get('num_questions');
+        $all_questions = password_reset_questions_get();
+        for ($i = 0; $i < $num_user_questions; ++$i) {
+          $count = count($all_questions);
+          if ($count) {
+            $checksum = crc32(drupal_strtolower($form_state['values']['username']));
+            $keys = array_keys($all_questions);
+            $qid = $keys[abs($checksum % $count)];
+
+            $question = new stdClass();
+            $question->qid = $qid;
+            $question->question = $all_questions[$qid];
+            // Reuse function to generate random answer for the invalid attempt.
+            $question->answer = _password_reset_generate_fake_mail();
+            $questions[] = $question;
+            // remove the question just chosen so it can't be used again.
+            unset($all_questions[$qid]);
+          }
         }
       }
-
-      if ($question) {
+      if ($questions) {
         $form['username'] = array('#type' => 'value', '#value' => $form_state['values']['username']);
         $form['uid'] = array('#type' => 'value', '#value' => $uid);
-        $form['question_object'] = array('#type' => 'value', '#value' => $question);
-
-        $form['question'] = array(
-          '#type' => 'item',
-          '#title' => t('Security question'),
-          '#markup' => t('%question', array('%question' => $question->question))
-        );
-        $form['answer'] = array(
-          '#type' => 'textfield',
-          '#title' => t('Answer'),
-          '#description' => t('Enter the answer to the above question.'),
-          '#required' => TRUE,
-          '#weight' => 2
-        );
+        $form['challenge']['#tree'] = TRUE;
+
+        $i = 0;
+        foreach ($questions as $question) {
+          ++$i;
+          $form['challenge'][$i]['question_object'] = array('#type' => 'value', '#value' => $question);
+
+          $form['challenge'][$i]['question'] = array(
+            '#type' => 'item',
+            '#title' => t('Security question !x', array('!x' => $i)),
+            '#markup' => t('%question', array('%question' => $question->question))
+          );
+          $form['challenge'][$i]['answer'] = array(
+            '#type' => 'textfield',
+            '#title' => t('Answer'),
+            '#description' => t('Enter the answer to the above question.'),
+            '#required' => TRUE,
+            '#weight' => 2
+          );
+        }
         $form['operation'] = array(
           '#type' => 'submit',
           '#value' => t('Next'),
@@ -495,14 +531,22 @@ function password_reset_form_validate($form, &$form_state) {
     }
 
     $uid = $form_state['values']['uid'];
-    $question = $form_state['values']['question_object'];
-    $answer = _password_reset_answer_sanitise($form_state['values']['answer']);
-    $answer = _password_reset_answer_encase($answer, $question->qid);
-
     require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
-
-    if (!$question || !_password_reset_answer_check($question->answer, $answer)) {
-      form_set_error('answer', t('Answer incorrect. Please check and try again.'));
+    // check each answer
+    foreach ($form_state['values']['challenge'] as $qna) {
+      $question = $qna['question_object'];
+      $answer = _password_reset_answer_sanitise($qna['answer']);
+      $answer = _password_reset_answer_encase($answer, $question->qid); 
+      
+      if (count($form_state['values']['challenge']) == 1) {
+        $response = 'The answer you entered is incorrect, please try again.';
+      }
+      if (count($form_state['values']['challenge']) > 1) {
+        $response = 'One or more of your answers is incorrect, please try again.';
+      }
+      if (!$question || !_password_reset_answer_check($question->answer, $answer)) {
+        form_set_error('challenge', t($response));
+      }
     }
 
     flood_register_event('password_reset');
@@ -523,26 +567,37 @@ function password_reset_form_submit($form, &$form_state) {
 function password_reset_form_inject(&$form) {
   $form['password_reset'] = array(
     '#type' => 'fieldset',
-    '#title' => t('Security question'),
-    '#description' => t('To reset your password in case you have forgotten it, a security question will be asked to verify your identity.'),
+    '#title' => t('Security questions'),
+    '#description' => t('To reset your password in case you have forgotten it, security questions will be asked to verify your identity.'),
     '#tree' => TRUE,
-    '#collapsible' => TRUE
-  );
-  $form['password_reset']['question'] = array(
-    '#type' => 'select',
-    '#title' => t('Question'),
-    '#description' => t('Choose the question that you would like asked.'),
-    '#options' => password_reset_questions_get(),
-    '#required' => TRUE
+    '#collapsible' => TRUE,
+    '#weight' => 0,
   );
-  $form['password_reset']['answer'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Answer'),
-    '#description' => t('Type the answer to the question you have chosen.'),
-    '#maxlength' => 255,
-    '#required' => TRUE
-  );
-
+  $num_questions = _password_reset_variable_get('num_questions');
+  for ($i = 1; $i <= $num_questions; ++$i) {
+    $form['password_reset']['challenge'][$i]['question'] = array(
+      '#type' => 'select',
+      '#title' => t('Question !x', array('!x' => $i)),
+      '#description' => t('Choose the question that you would like asked (can only be used once).'),
+      '#options' => password_reset_questions_get(),
+      '#required' => TRUE,
+      '#weight' => $i * 2,
+    );
+    $form['password_reset']['challenge'][$i]['answer'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Answer !x', array('!x' => $i)),
+      '#description' => t('Type the answer to the question you have chosen.'),
+      '#maxlength' => 255,
+      '#required' => TRUE,
+      '#weight' => $i * 2 + 1,
+    );
+    if ($num_questions == 1) {
+      $form['password_reset']['challenge'][$i]['question']['#title'] = t('Question');
+      $form['password_reset']['challenge'][$i]['answer']['#title'] = t('Answer');
+      $form['password_reset']['challenge'][$i]['question']['#description'] = t('Choose the question that you would like asked.');
+    }
+    
+  }
   $form['#validate'][] = 'password_reset_user_form_validate';
   $form['#submit'][] = 'password_reset_user_form_submit';
 }
@@ -618,14 +673,14 @@ function password_reset_question_get($qid, $count = FALSE) {
 }
 
 /**
- * Retrieve question and answer specific to a user.
+ * Retrieve questions and answers specific to a user.
  */
 function password_reset_user_question_get($uid) {
   return db_query('SELECT pr.qid, pr.question, pru.answer
     FROM {password_reset_users} pru
     INNER JOIN {password_reset} pr USING (qid)
     WHERE pru.uid = :uid', array(':uid' => $uid))
-    ->fetchObject();
+    ->fetchAll();
 }
 
 /**
@@ -744,7 +799,8 @@ function _password_reset_variable_get($name = NULL, $reset = FALSE) {
       'flood_control' => 3,
       'password_verify' => TRUE,
       'redirect_user' => TRUE,
-      'registration_form' => TRUE
+      'registration_form' => TRUE,
+      'num_questions' => 1,
     );
     $variables = variable_get('password_reset', array());
     $variables = array_merge($defaults, $variables);
